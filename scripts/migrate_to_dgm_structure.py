# scripts/migrate_to_dgm_structure.py
"""
Script de migration pour adapter GabonM√©t√©o+ √† la structure officielle de la DGM
Bas√© sur le d√©cret n¬∞0768/PR/MERN du 22 ao√ªt 2008
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models.user import User
from app.models.agent import Direction, Service, AgentDGM
from app.models.weather_data import WeatherStation
from datetime import datetime

def create_dgm_structure():
    """Cr√©e la structure organisationnelle officielle de la DGM"""
    
    app = create_app()
    
    with app.app_context():
        print("üè¢ Migration vers la structure officielle DGM...")
        
        # 1. Supprimer l'ancienne structure (si n√©cessaire)
        print("üìã Nettoyage de l'ancienne structure...")
        Service.query.delete()
        Direction.query.delete()
        db.session.commit()
        
        # 2. Cr√©er les Divisions selon le d√©cret
        print("üî® Cr√©ation des Divisions officielles...")
        
        divisions_data = [
            {
                'name': 'Direction G√©n√©rale',
                'description': 'Direction G√©n√©rale de la M√©t√©orologie',
                'code': 'DG'
            },
            {
                'name': 'Division Administrative et Financi√®re',
                'description': 'Gestion administrative, financi√®re et des ressources humaines',
                'code': 'DAF'
            },
            {
                'name': 'Division des √âtudes et de la Recherche',
                'description': '√âtudes climatologiques, recherche et m√©t√©orologie sp√©cialis√©e',
                'code': 'DER'
            },
            {
                'name': 'Division des Observations',
                'description': 'R√©seau d\'observation, stations et instrumentation',
                'code': 'DO'
            },
            {
                'name': 'Division des Pr√©visions',
                'description': 'Pr√©visions m√©t√©orologiques, alertes et diffusion',
                'code': 'DP'
            }
        ]
        
        divisions = {}
        for div_data in divisions_data:
            division = Direction(
                name=div_data['name'],
                description=div_data['description']
            )
            db.session.add(division)
            db.session.flush()  # Pour obtenir l'ID
            divisions[div_data['code']] = division
            print(f"   ‚úÖ {div_data['name']}")
        
        db.session.commit()
        
        # 3. Cr√©er les Services selon l'organigramme
        print("üîß Cr√©ation des Services...")
        
        services_data = [
            # Direction G√©n√©rale
            {
                'name': 'Secr√©tariat Particulier',
                'description': 'Secr√©tariat du Directeur G√©n√©ral',
                'division': 'DG',
                'code': 'SP'
            },
            {
                'name': 'Cellule de Communication',
                'description': 'Communication institutionnelle et relations publiques',
                'division': 'DG',
                'code': 'CC'
            },
            
            # Division Administrative et Financi√®re
            {
                'name': 'Service du Personnel',
                'description': 'Gestion des ressources humaines et formation',
                'division': 'DAF',
                'code': 'SP'
            },
            {
                'name': 'Service Financier et Comptable',
                'description': 'Gestion financi√®re, comptabilit√© et budget',
                'division': 'DAF',
                'code': 'SFC'
            },
            {
                'name': 'Service de la Logistique',
                'description': 'Approvisionnement, √©quipements et infrastructure',
                'division': 'DAF',
                'code': 'SL'
            },
            
            # Division des √âtudes et de la Recherche
            {
                'name': 'Service de la Climatologie',
                'description': '√âtudes climatologiques et analyses historiques',
                'division': 'DER',
                'code': 'SC'
            },
            {
                'name': 'Service de l\'Agro-m√©t√©orologie',
                'description': 'M√©t√©orologie agricole et services aux secteurs',
                'division': 'DER',
                'code': 'SAM'
            },
            {
                'name': 'Service de la M√©t√©orologie A√©ronautique',
                'description': 'Services m√©t√©orologiques pour l\'aviation',
                'division': 'DER',
                'code': 'SMA'
            },
            
            # Division des Observations
            {
                'name': 'Service des Stations M√©t√©orologiques',
                'description': 'Gestion et exploitation du r√©seau de stations',
                'division': 'DO',
                'code': 'SSM'
            },
            {
                'name': 'Service de l\'Instrumentation',
                'description': 'Instruments m√©t√©orologiques et m√©trologie',
                'division': 'DO',
                'code': 'SI'
            },
            {
                'name': 'Service de la Maintenance',
                'description': 'Maintenance des √©quipements et infrastructure',
                'division': 'DO',
                'code': 'SM'
            },
            
            # Division des Pr√©visions
            {
                'name': 'Service des Pr√©visions M√©t√©orologiques',
                'description': '√âlaboration des pr√©visions m√©t√©orologiques',
                'division': 'DP',
                'code': 'SPM'
            },
            {
                'name': 'Service de la Diffusion',
                'description': 'Diffusion des bulletins et informations m√©t√©o',
                'division': 'DP',
                'code': 'SD'
            },
            {
                'name': 'Service des Alertes M√©t√©orologiques',
                'description': 'Surveillance et √©mission des alertes m√©t√©o',
                'division': 'DP',
                'code': 'SAM'
            }
        ]
        
        services = {}
        for serv_data in services_data:
            service = Service(
                name=serv_data['name'],
                description=serv_data['description'],
                direction_id=divisions[serv_data['division']].id
            )
            db.session.add(service)
            db.session.flush()
            services[serv_data['code']] = service
            print(f"   ‚úÖ {serv_data['name']} ({divisions[serv_data['division']].name})")
        
        db.session.commit()
        
        # 4. Cr√©er les utilisateurs par d√©faut selon la hi√©rarchie
        print("üë• Cr√©ation des utilisateurs par d√©faut...")
        
        default_users = [
            {
                'username': 'directeur_general',
                'email': 'dg@dgm.ga',
                'password': 'dgm2025!',
                'role': 'directeur_general',
                'service': None  # Direction g√©n√©rale
            },
            {
                'username': 'directeur_adjoint',
                'email': 'adjoint@dgm.ga',
                'password': 'dgm2025!',
                'role': 'directeur_adjoint',
                'service': None
            },
            {
                'username': 'dir_administrative',
                'email': 'admin@dgm.ga',
                'password': 'dgm2025!',
                'role': 'directeur_division',
                'service': 'SP'  # Service du Personnel
            },
            {
                'username': 'dir_observations',
                'email': 'observations@dgm.ga',
                'password': 'dgm2025!',
                'role': 'directeur_division',
                'service': 'SSM'  # Service des Stations
            },
            {
                'username': 'dir_previsions',
                'email': 'previsions@dgm.ga',
                'password': 'dgm2025!',
                'role': 'directeur_division',
                'service': 'SPM'  # Service des Pr√©visions
            },
            {
                'username': 'dir_etudes',
                'email': 'etudes@dgm.ga',
                'password': 'dgm2025!',
                'role': 'directeur_division',
                'service': 'SC'  # Service Climatologie
            },
            {
                'username': 'chef_stations',
                'email': 'stations@dgm.ga',
                'password': 'dgm2025!',
                'role': 'chef_service',
                'service': 'SSM'
            },
            {
                'username': 'agent_libreville',
                'email': 'libreville@dgm.ga',
                'password': 'dgm2025!',
                'role': 'agent_dgm',
                'service': 'SSM'
            }
        ]
        
        for user_data in default_users:
            # V√©rifier si l'utilisateur existe d√©j√†
            existing = User.query.filter_by(username=user_data['username']).first()
            if not existing:
                user = User(
                    username=user_data['username'],
                    email=user_data['email'],
                    role=user_data['role']
                )
                user.set_password(user_data['password'])
                db.session.add(user)
                db.session.flush()
                
                # Cr√©er l'agent DGM correspondant si c'est un agent
                if user_data['role'] in ['directeur_division', 'chef_service', 'agent_dgm']:
                    agent = AgentDGM(
                        matricule=f"DGM{user.id:04d}",
                        user_id=user.id,
                        date_naissance=datetime(1980, 1, 1).date(),
                        fonction=get_fonction_from_role(user_data['role']),
                        service_id=services[user_data['service']].id if user_data['service'] else None
                    )
                    db.session.add(agent)
                
                print(f"   ‚úÖ {user_data['username']} ({user_data['role']})")
        
        db.session.commit()
        
        # 5. Cr√©er les centres r√©gionaux (structure d√©concentr√©e)
        print("üåç Cr√©ation des centres r√©gionaux...")
        
        centres_regionaux = [
            {
                'name': 'Centre M√©t√©orologique de Libreville',
                'region': 'Estuaire',
                'type': 'centre_regional'
            },
            {
                'name': 'Centre M√©t√©orologique de Port-Gentil',
                'region': 'Ogoou√©-Maritime',
                'type': 'centre_regional'
            },
            {
                'name': 'Centre M√©t√©orologique de Franceville',
                'region': 'Haut-Ogoou√©',
                'type': 'centre_regional'
            }
        ]
        
        for centre in centres_regionaux:
            print(f"   ‚úÖ {centre['name']}")
        
        print("\nüéâ Migration termin√©e avec succ√®s!")
        print("\nüìã R√©capitulatif:")
        print(f"   - {len(divisions_data)} Divisions cr√©√©es")
        print(f"   - {len(services_data)} Services cr√©√©s")
        print(f"   - {len(default_users)} Utilisateurs cr√©√©s")
        print(f"   - {len(centres_regionaux)} Centres r√©gionaux d√©finis")
        
        print("\nüîê Comptes par d√©faut:")
        print("   Directeur G√©n√©ral: directeur_general / dgm2025!")
        print("   Directeur Adjoint: directeur_adjoint / dgm2025!")
        print("   Dir. Administrative: dir_administrative / dgm2025!")
        print("   Dir. Observations: dir_observations / dgm2025!")
        print("   Dir. Pr√©visions: dir_previsions / dgm2025!")
        print("   Dir. √âtudes: dir_etudes / dgm2025!")

def get_fonction_from_role(role):
    """Retourne la fonction correspondant au r√¥le"""
    roles_fonctions = {
        'directeur_general': 'Directeur G√©n√©ral',
        'directeur_adjoint': 'Directeur G√©n√©ral Adjoint',
        'directeur_division': 'Directeur de Division',
        'chef_service': 'Chef de Service',
        'agent_dgm': 'Agent M√©t√©orologique'
    }
    return roles_fonctions.get(role, 'Agent DGM')

def create_stations_hierarchy():
    """Organise les stations selon la hi√©rarchie r√©gionale"""
    
    print("\nüè¢ Organisation des stations par centres r√©gionaux...")
    
    # Mapper les stations existantes aux centres r√©gionaux
    station_mapping = {
        'Libreville': 'Centre M√©t√©orologique de Libreville',
        'Port-Gentil': 'Centre M√©t√©orologique de Port-Gentil', 
        'Franceville': 'Centre M√©t√©orologique de Franceville',
        'Lambar√©n√©': 'Centre M√©t√©orologique de Libreville',  # Rattach√© √† Libreville
        'Oyem': 'Centre M√©t√©orologique de Libreville'  # Rattach√© √† Libreville
    }
    
    stations = WeatherStation.query.all()
    for station in stations:
        if station.name in station_mapping:
            centre = station_mapping[station.name]
            print(f"   üìç {station.name} ‚Üí {centre}")

if __name__ == "__main__":
    print("üöÄ D√©marrage de la migration vers la structure DGM officielle...")
    create_dgm_structure()
    create_stations_hierarchy()
    print("\n‚úÖ Migration compl√®te!")